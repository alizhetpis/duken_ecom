{"ast":null,"code":"/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\n\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar Version = require('./version');\nvar BitMatrix = require('./bitmat');\nvar DataMask = require('./datamask');\nvar FormatInformation = require('./formatinf');\nfunction BitMatrixParser(bitMatrix) {\n  var dimension = bitMatrix.Dimension;\n  if (dimension < 21 || (dimension & 0x03) != 1) {\n    throw \"Error BitMatrixParser\";\n  }\n  this.bitMatrix = bitMatrix;\n  this.parsedVersion = null;\n  this.parsedFormatInfo = null;\n  this.copyBit = function (i, j, versionBits) {\n    return this.bitMatrix.get_Renamed(i, j) ? versionBits << 1 | 0x1 : versionBits << 1;\n  };\n  this.readFormatInformation = function () {\n    if (this.parsedFormatInfo != null) {\n      return this.parsedFormatInfo;\n    }\n\n    // Read top-left format info bits\n    var formatInfoBits = 0;\n    for (var i = 0; i < 6; i++) {\n      formatInfoBits = this.copyBit(i, 8, formatInfoBits);\n    }\n    // .. and skip a bit in the timing pattern ...\n    formatInfoBits = this.copyBit(7, 8, formatInfoBits);\n    formatInfoBits = this.copyBit(8, 8, formatInfoBits);\n    formatInfoBits = this.copyBit(8, 7, formatInfoBits);\n    // .. and skip a bit in the timing pattern ...\n    for (var j = 5; j >= 0; j--) {\n      formatInfoBits = this.copyBit(8, j, formatInfoBits);\n    }\n    this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\n    if (this.parsedFormatInfo != null) {\n      return this.parsedFormatInfo;\n    }\n\n    // Hmm, failed. Try the top-right/bottom-left pattern\n    var dimension = this.bitMatrix.Dimension;\n    formatInfoBits = 0;\n    var iMin = dimension - 8;\n    for (var i = dimension - 1; i >= iMin; i--) {\n      formatInfoBits = this.copyBit(i, 8, formatInfoBits);\n    }\n    for (var j = dimension - 7; j < dimension; j++) {\n      formatInfoBits = this.copyBit(8, j, formatInfoBits);\n    }\n    this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\n    if (this.parsedFormatInfo != null) {\n      return this.parsedFormatInfo;\n    }\n    throw \"Error readFormatInformation\";\n  };\n  this.readVersion = function () {\n    if (this.parsedVersion != null) {\n      return this.parsedVersion;\n    }\n    var dimension = this.bitMatrix.Dimension;\n    var provisionalVersion = dimension - 17 >> 2;\n    if (provisionalVersion <= 6) {\n      return Version.getVersionForNumber(provisionalVersion);\n    }\n\n    // Read top-right version info: 3 wide by 6 tall\n    var versionBits = 0;\n    var ijMin = dimension - 11;\n    for (var j = 5; j >= 0; j--) {\n      for (var i = dimension - 9; i >= ijMin; i--) {\n        versionBits = this.copyBit(i, j, versionBits);\n      }\n    }\n    this.parsedVersion = Version.decodeVersionInformation(versionBits);\n    if (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension) {\n      return this.parsedVersion;\n    }\n\n    // Hmm, failed. Try bottom left: 6 wide by 3 tall\n    versionBits = 0;\n    for (var i = 5; i >= 0; i--) {\n      for (var j = dimension - 9; j >= ijMin; j--) {\n        versionBits = this.copyBit(i, j, versionBits);\n      }\n    }\n    this.parsedVersion = Version.decodeVersionInformation(versionBits);\n    if (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension) {\n      return this.parsedVersion;\n    }\n    throw \"Error readVersion\";\n  };\n  this.readCodewords = function () {\n    var formatInfo = this.readFormatInformation();\n    var version = this.readVersion();\n\n    // Get the data mask for the format used in this QR Code. This will exclude\n    // some bits from reading as we wind through the bit matrix.\n    var dataMask = DataMask.forReference(formatInfo.DataMask);\n    var dimension = this.bitMatrix.Dimension;\n    dataMask.unmaskBitMatrix(this.bitMatrix, dimension);\n    var functionPattern = version.buildFunctionPattern();\n    var readingUp = true;\n    var result = new Array(version.TotalCodewords);\n    var resultOffset = 0;\n    var currentByte = 0;\n    var bitsRead = 0;\n    // Read columns in pairs, from right to left\n    for (var j = dimension - 1; j > 0; j -= 2) {\n      if (j == 6) {\n        // Skip whole column with vertical alignment pattern;\n        // saves time and makes the other code proceed more cleanly\n        j--;\n      }\n      // Read alternatingly from bottom to top then top to bottom\n      for (var count = 0; count < dimension; count++) {\n        var i = readingUp ? dimension - 1 - count : count;\n        for (var col = 0; col < 2; col++) {\n          // Ignore bits covered by the function pattern\n          if (!functionPattern.get_Renamed(j - col, i)) {\n            // Read a bit\n            bitsRead++;\n            currentByte <<= 1;\n            if (this.bitMatrix.get_Renamed(j - col, i)) {\n              currentByte |= 1;\n            }\n            // If we've made a whole byte, save it off\n            if (bitsRead == 8) {\n              result[resultOffset++] = currentByte;\n              bitsRead = 0;\n              currentByte = 0;\n            }\n          }\n        }\n      }\n      readingUp ^= true; // readingUp = !readingUp; // switch directions\n    }\n\n    if (resultOffset != version.TotalCodewords) {\n      throw \"Error readCodewords\";\n    }\n    return result;\n  };\n}\nmodule.exports = BitMatrixParser;","map":{"version":3,"names":["Version","require","BitMatrix","DataMask","FormatInformation","BitMatrixParser","bitMatrix","dimension","Dimension","parsedVersion","parsedFormatInfo","copyBit","i","j","versionBits","get_Renamed","readFormatInformation","formatInfoBits","decodeFormatInformation","iMin","readVersion","provisionalVersion","getVersionForNumber","ijMin","decodeVersionInformation","DimensionForVersion","readCodewords","formatInfo","version","dataMask","forReference","unmaskBitMatrix","functionPattern","buildFunctionPattern","readingUp","result","Array","TotalCodewords","resultOffset","currentByte","bitsRead","count","col","module","exports"],"sources":["/Users/alizhetpis/Documents/duken/frontend/node_modules/jsqrcode/src/bmparser.js"],"sourcesContent":["/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\nvar Version = require('./version');\r\nvar BitMatrix = require('./bitmat');\r\nvar DataMask = require('./datamask');\r\nvar FormatInformation = require('./formatinf');\r\n\r\nfunction BitMatrixParser(bitMatrix)\r\n{\r\n  var dimension = bitMatrix.Dimension;\r\n  if (dimension < 21 || (dimension & 0x03) != 1)\r\n  {\r\n    throw \"Error BitMatrixParser\";\r\n  }\r\n  this.bitMatrix = bitMatrix;\r\n  this.parsedVersion = null;\r\n  this.parsedFormatInfo = null;\r\n  \r\n  this.copyBit=function( i,  j,  versionBits)\r\n  {\r\n    return this.bitMatrix.get_Renamed(i, j)?(versionBits << 1) | 0x1:versionBits << 1;\r\n  }\r\n  \r\n  this.readFormatInformation=function()\r\n  {\r\n      if (this.parsedFormatInfo != null)\r\n      {\r\n        return this.parsedFormatInfo;\r\n      }\r\n      \r\n      // Read top-left format info bits\r\n      var formatInfoBits = 0;\r\n      for (var i = 0; i < 6; i++)\r\n      {\r\n        formatInfoBits = this.copyBit(i, 8, formatInfoBits);\r\n      }\r\n      // .. and skip a bit in the timing pattern ...\r\n      formatInfoBits = this.copyBit(7, 8, formatInfoBits);\r\n      formatInfoBits = this.copyBit(8, 8, formatInfoBits);\r\n      formatInfoBits = this.copyBit(8, 7, formatInfoBits);\r\n      // .. and skip a bit in the timing pattern ...\r\n      for (var j = 5; j >= 0; j--)\r\n      {\r\n        formatInfoBits = this.copyBit(8, j, formatInfoBits);\r\n      }\r\n      \r\n      this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\r\n      if (this.parsedFormatInfo != null)\r\n      {\r\n        return this.parsedFormatInfo;\r\n      }\r\n      \r\n      // Hmm, failed. Try the top-right/bottom-left pattern\r\n      var dimension = this.bitMatrix.Dimension;\r\n      formatInfoBits = 0;\r\n      var iMin = dimension - 8;\r\n      for (var i = dimension - 1; i >= iMin; i--)\r\n      {\r\n        formatInfoBits = this.copyBit(i, 8, formatInfoBits);\r\n      }\r\n      for (var j = dimension - 7; j < dimension; j++)\r\n      {\r\n        formatInfoBits = this.copyBit(8, j, formatInfoBits);\r\n      }\r\n      \r\n      this.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\r\n      if (this.parsedFormatInfo != null)\r\n      {\r\n        return this.parsedFormatInfo;\r\n      }\r\n      throw \"Error readFormatInformation\";  \r\n  }\r\n  this.readVersion=function()\r\n    {\r\n      \r\n      if (this.parsedVersion != null)\r\n      {\r\n        return this.parsedVersion;\r\n      }\r\n      \r\n      var dimension = this.bitMatrix.Dimension;\r\n      \r\n      var provisionalVersion = (dimension - 17) >> 2;\r\n      if (provisionalVersion <= 6)\r\n      {\r\n        return Version.getVersionForNumber(provisionalVersion);\r\n      }\r\n      \r\n      // Read top-right version info: 3 wide by 6 tall\r\n      var versionBits = 0;\r\n      var ijMin = dimension - 11;\r\n      for (var j = 5; j >= 0; j--)\r\n      {\r\n        for (var i = dimension - 9; i >= ijMin; i--)\r\n        {\r\n          versionBits = this.copyBit(i, j, versionBits);\r\n        }\r\n      }\r\n      \r\n      this.parsedVersion = Version.decodeVersionInformation(versionBits);\r\n      if (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension)\r\n      {\r\n        return this.parsedVersion;\r\n      }\r\n      \r\n      // Hmm, failed. Try bottom left: 6 wide by 3 tall\r\n      versionBits = 0;\r\n      for (var i = 5; i >= 0; i--)\r\n      {\r\n        for (var j = dimension - 9; j >= ijMin; j--)\r\n        {\r\n          versionBits = this.copyBit(i, j, versionBits);\r\n        }\r\n      }\r\n      \r\n      this.parsedVersion = Version.decodeVersionInformation(versionBits);\r\n      if (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension)\r\n      {\r\n        return this.parsedVersion;\r\n      }\r\n      throw \"Error readVersion\";\r\n    }\r\n  this.readCodewords=function()\r\n    {\r\n      \r\n      var formatInfo = this.readFormatInformation();\r\n      var version = this.readVersion();\r\n      \r\n      // Get the data mask for the format used in this QR Code. This will exclude\r\n      // some bits from reading as we wind through the bit matrix.\r\n      var dataMask = DataMask.forReference( formatInfo.DataMask);\r\n      var dimension = this.bitMatrix.Dimension;\r\n      dataMask.unmaskBitMatrix(this.bitMatrix, dimension);\r\n      \r\n      var functionPattern = version.buildFunctionPattern();\r\n      \r\n      var readingUp = true;\r\n      var result = new Array(version.TotalCodewords);\r\n      var resultOffset = 0;\r\n      var currentByte = 0;\r\n      var bitsRead = 0;\r\n      // Read columns in pairs, from right to left\r\n      for (var j = dimension - 1; j > 0; j -= 2)\r\n      {\r\n        if (j == 6)\r\n        {\r\n          // Skip whole column with vertical alignment pattern;\r\n          // saves time and makes the other code proceed more cleanly\r\n          j--;\r\n        }\r\n        // Read alternatingly from bottom to top then top to bottom\r\n        for (var count = 0; count < dimension; count++)\r\n        {\r\n          var i = readingUp?dimension - 1 - count:count;\r\n          for (var col = 0; col < 2; col++)\r\n          {\r\n            // Ignore bits covered by the function pattern\r\n            if (!functionPattern.get_Renamed(j - col, i))\r\n            {\r\n              // Read a bit\r\n              bitsRead++;\r\n              currentByte <<= 1;\r\n              if (this.bitMatrix.get_Renamed(j - col, i))\r\n              {\r\n                currentByte |= 1;\r\n              }\r\n              // If we've made a whole byte, save it off\r\n              if (bitsRead == 8)\r\n              {\r\n                result[resultOffset++] =  currentByte;\r\n                bitsRead = 0;\r\n                currentByte = 0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        readingUp ^= true; // readingUp = !readingUp; // switch directions\r\n      }\r\n      if (resultOffset != version.TotalCodewords)\r\n      {\r\n        throw \"Error readCodewords\";\r\n      }\r\n      return result;\r\n    }\r\n}\r\n\r\nmodule.exports = BitMatrixParser;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}