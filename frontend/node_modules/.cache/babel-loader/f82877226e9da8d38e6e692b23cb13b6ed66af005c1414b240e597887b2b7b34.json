{"ast":null,"code":"/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\n\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar GF256 = null;\nfunction GF256Poly(field, coefficients) {\n  if (coefficients == null || coefficients.length == 0) throw new Error(\"GF256Poly bad arguments. no coefficients provided\");\n  if (!GF256) GF256 = require('./gf256');\n  this.field = field;\n  var coefficientsLength = coefficients.length;\n  if (coefficientsLength > 1 && coefficients[0] == 0) {\n    // Leading term must be non-zero for anything except the constant polynomial \"0\"\n    var firstNonZero = 1;\n    while (firstNonZero < coefficientsLength && coefficients[firstNonZero] == 0) {\n      firstNonZero++;\n    }\n    if (firstNonZero == coefficientsLength) {\n      this.coefficients = field.Zero.coefficients;\n    } else {\n      this.coefficients = new Array(coefficientsLength - firstNonZero);\n      for (var i = 0; i < this.coefficients.length; i++) this.coefficients[i] = 0;\n      //Array.Copy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      for (var ci = 0; ci < this.coefficients.length; ci++) this.coefficients[ci] = coefficients[firstNonZero + ci];\n    }\n  } else {\n    this.coefficients = coefficients;\n  }\n  this.__defineGetter__(\"Zero\", function () {\n    return this.coefficients[0] == 0;\n  });\n  this.__defineGetter__(\"Degree\", function () {\n    return this.coefficients.length - 1;\n  });\n  this.__defineGetter__(\"Coefficients\", function () {\n    return this.coefficients;\n  });\n  this.getCoefficient = function (degree) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  this.evaluateAt = function (a) {\n    if (a == 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n    var size = this.coefficients.length;\n    if (a == 1) {\n      // Just the sum of the coefficients\n      var result = 0;\n      for (var i = 0; i < size; i++) {\n        result = GF256.addOrSubtract(result, this.coefficients[i]);\n      }\n      return result;\n    }\n    var result2 = this.coefficients[0];\n    for (var i = 1; i < size; i++) {\n      result2 = GF256.addOrSubtract(this.field.multiply(a, result2), this.coefficients[i]);\n    }\n    return result2;\n  };\n  this.addOrSubtract = function (other) {\n    if (this.field != other.field) {\n      throw \"GF256Polys do not have same GF256 field\";\n    }\n    if (this.Zero) {\n      return other;\n    }\n    if (other.Zero) {\n      return this;\n    }\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n    var sumDiff = new Array(largerCoefficients.length);\n    var lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n    // Copy high-order terms only found in higher-degree polynomial's coefficients\n    //Array.Copy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n    for (var ci = 0; ci < lengthDiff; ci++) sumDiff[ci] = largerCoefficients[ci];\n    for (var i = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = GF256.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n    return new GF256Poly(field, sumDiff);\n  };\n  this.multiply1 = function (other) {\n    if (this.field != other.field) {\n      throw \"GF256Polys do not have same GF256 field\";\n    }\n    if (this.Zero || other.Zero) {\n      return this.field.Zero;\n    }\n    var aCoefficients = this.coefficients;\n    var aLength = aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength = bCoefficients.length;\n    var product = new Array(aLength + bLength - 1);\n    for (var i = 0; i < aLength; i++) {\n      var aCoeff = aCoefficients[i];\n      for (var j = 0; j < bLength; j++) {\n        product[i + j] = GF256.addOrSubtract(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n    return new GF256Poly(this.field, product);\n  };\n  this.multiply2 = function (scalar) {\n    if (scalar == 0) {\n      return this.field.Zero;\n    }\n    if (scalar == 1) {\n      return this;\n    }\n    var size = this.coefficients.length;\n    var product = new Array(size);\n    for (var i = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], scalar);\n    }\n    return new GF256Poly(this.field, product);\n  };\n  this.multiplyByMonomial = function (degree, coefficient) {\n    if (degree < 0) {\n      throw \"System.ArgumentException\";\n    }\n    if (coefficient == 0) {\n      return this.field.Zero;\n    }\n    var size = this.coefficients.length;\n    var product = new Array(size + degree);\n    for (var i = 0; i < product.length; i++) product[i] = 0;\n    for (var i = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], coefficient);\n    }\n    return new GF256Poly(this.field, product);\n  };\n  this.divide = function (other) {\n    if (this.field != other.field) {\n      throw \"GF256Polys do not have same GF256 field\";\n    }\n    if (other.Zero) {\n      throw \"Divide by 0\";\n    }\n    var quotient = this.field.Zero;\n    var remainder = this;\n    var denominatorLeadingTerm = other.getCoefficient(other.Degree);\n    var inverseDenominatorLeadingTerm = this.field.inverse(denominatorLeadingTerm);\n    while (remainder.Degree >= other.Degree && !remainder.Zero) {\n      var degreeDifference = remainder.Degree - other.Degree;\n      var scale = this.field.multiply(remainder.getCoefficient(remainder.Degree), inverseDenominatorLeadingTerm);\n      var term = other.multiplyByMonomial(degreeDifference, scale);\n      var iterationQuotient = this.field.buildMonomial(degreeDifference, scale);\n      quotient = quotient.addOrSubtract(iterationQuotient);\n      remainder = remainder.addOrSubtract(term);\n    }\n    return new Array(quotient, remainder);\n  };\n}\nmodule.exports = GF256Poly;","map":{"version":3,"names":["GF256","GF256Poly","field","coefficients","length","Error","require","coefficientsLength","firstNonZero","Zero","Array","i","ci","__defineGetter__","getCoefficient","degree","evaluateAt","a","size","result","addOrSubtract","result2","multiply","other","smallerCoefficients","largerCoefficients","temp","sumDiff","lengthDiff","multiply1","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","j","multiply2","scalar","multiplyByMonomial","coefficient","divide","quotient","remainder","denominatorLeadingTerm","Degree","inverseDenominatorLeadingTerm","inverse","degreeDifference","scale","term","iterationQuotient","buildMonomial","module","exports"],"sources":["/Users/alizhetpis/Documents/duken/frontend/node_modules/jsqrcode/src/gf256poly.js"],"sourcesContent":["/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\nvar GF256 = null;\r\n\r\nfunction GF256Poly(field,  coefficients)\r\n{\r\n  if (coefficients == null || coefficients.length == 0) \r\n    throw new Error(\"GF256Poly bad arguments. no coefficients provided\");\r\n  if(!GF256) GF256 = require('./gf256');\r\n  this.field = field;\r\n  var coefficientsLength = coefficients.length;\r\n  if (coefficientsLength > 1 && coefficients[0] == 0)\r\n  {\r\n    // Leading term must be non-zero for anything except the constant polynomial \"0\"\r\n    var firstNonZero = 1;\r\n    while (firstNonZero < coefficientsLength && coefficients[firstNonZero] == 0)\r\n    {\r\n      firstNonZero++;\r\n    }\r\n    if (firstNonZero == coefficientsLength)\r\n    {\r\n      this.coefficients = field.Zero.coefficients;\r\n    }\r\n    else\r\n    {\r\n      this.coefficients = new Array(coefficientsLength - firstNonZero);\r\n      for(var i=0;i<this.coefficients.length;i++)this.coefficients[i]=0;\r\n      //Array.Copy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\r\n      for(var ci=0;ci<this.coefficients.length;ci++)this.coefficients[ci]=coefficients[firstNonZero+ci];\r\n    }\r\n  }\r\n  else\r\n  {\r\n    this.coefficients = coefficients;\r\n  }\r\n  \r\n  this.__defineGetter__(\"Zero\", function()\r\n  {\r\n    return this.coefficients[0] == 0;\r\n  });\r\n  this.__defineGetter__(\"Degree\", function()\r\n  {\r\n    return this.coefficients.length - 1;\r\n  });\r\n  this.__defineGetter__(\"Coefficients\", function()\r\n  {\r\n    return this.coefficients;\r\n  });\r\n  \r\n  this.getCoefficient=function( degree)\r\n  {\r\n    return this.coefficients[this.coefficients.length - 1 - degree];\r\n  }\r\n  \r\n  this.evaluateAt=function( a)\r\n  {\r\n    if (a == 0)\r\n    {\r\n      // Just return the x^0 coefficient\r\n      return this.getCoefficient(0);\r\n    }\r\n    var size = this.coefficients.length;\r\n    if (a == 1)\r\n    {\r\n      // Just the sum of the coefficients\r\n      var result = 0;\r\n      for (var i = 0; i < size; i++) {\r\n        result = GF256.addOrSubtract(result, this.coefficients[i]);\r\n      }\r\n      return result;\r\n    }\r\n    var result2 = this.coefficients[0];\r\n    for (var i = 1; i < size; i++)\r\n    {\r\n      result2 = GF256.addOrSubtract(this.field.multiply(a, result2), this.coefficients[i]);\r\n    }\r\n    return result2;\r\n  }\r\n  \r\n  this.addOrSubtract = function( other)\r\n    {\r\n      if (this.field != other.field)\r\n      {\r\n        throw \"GF256Polys do not have same GF256 field\";\r\n      }\r\n      if (this.Zero)\r\n      {\r\n        return other;\r\n      }\r\n      if (other.Zero)\r\n      {\r\n        return this;\r\n      }\r\n      \r\n      var smallerCoefficients = this.coefficients;\r\n      var largerCoefficients = other.coefficients;\r\n      if (smallerCoefficients.length > largerCoefficients.length)\r\n      {\r\n        var temp = smallerCoefficients;\r\n        smallerCoefficients = largerCoefficients;\r\n        largerCoefficients = temp;\r\n      }\r\n      var sumDiff = new Array(largerCoefficients.length);\r\n      var lengthDiff = largerCoefficients.length - smallerCoefficients.length;\r\n      // Copy high-order terms only found in higher-degree polynomial's coefficients\r\n      //Array.Copy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\r\n      for(var ci=0;ci<lengthDiff;ci++)sumDiff[ci]=largerCoefficients[ci];\r\n      \r\n      for (var i = lengthDiff; i < largerCoefficients.length; i++)\r\n      {\r\n        sumDiff[i] = GF256.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\r\n      }\r\n      \r\n      return new GF256Poly(field, sumDiff);\r\n  }\r\n  this.multiply1=function( other)\r\n    {\r\n      if (this.field!=other.field)\r\n      {\r\n        throw \"GF256Polys do not have same GF256 field\";\r\n      }\r\n      if (this.Zero || other.Zero)\r\n      {\r\n        return this.field.Zero;\r\n      }\r\n      var aCoefficients = this.coefficients;\r\n      var aLength = aCoefficients.length;\r\n      var bCoefficients = other.coefficients;\r\n      var bLength = bCoefficients.length;\r\n      var product = new Array(aLength + bLength - 1);\r\n      for (var i = 0; i < aLength; i++)\r\n      {\r\n        var aCoeff = aCoefficients[i];\r\n        for (var j = 0; j < bLength; j++)\r\n        {\r\n          product[i + j] = GF256.addOrSubtract(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\r\n        }\r\n      }\r\n      return new GF256Poly(this.field, product);\r\n    }\r\n  this.multiply2=function( scalar)\r\n    {\r\n      if (scalar == 0)\r\n      {\r\n        return this.field.Zero;\r\n      }\r\n      if (scalar == 1)\r\n      {\r\n        return this;\r\n      }\r\n      var size = this.coefficients.length;\r\n      var product = new Array(size);\r\n      for (var i = 0; i < size; i++)\r\n      {\r\n        product[i] = this.field.multiply(this.coefficients[i], scalar);\r\n      }\r\n      return new GF256Poly(this.field, product);\r\n    }\r\n  this.multiplyByMonomial=function( degree,  coefficient)\r\n    {\r\n      if (degree < 0)\r\n      {\r\n        throw \"System.ArgumentException\";\r\n      }\r\n      if (coefficient == 0)\r\n      {\r\n        return this.field.Zero;\r\n      }\r\n      var size = this.coefficients.length;\r\n      var product = new Array(size + degree);\r\n      for(var i=0;i<product.length;i++)product[i]=0;\r\n      for (var i = 0; i < size; i++)\r\n      {\r\n        product[i] = this.field.multiply(this.coefficients[i], coefficient);\r\n      }\r\n      return new GF256Poly(this.field, product);\r\n    }\r\n  this.divide=function( other)\r\n    {\r\n      if (this.field!=other.field)\r\n      {\r\n        throw \"GF256Polys do not have same GF256 field\";\r\n      }\r\n      if (other.Zero)\r\n      {\r\n        throw \"Divide by 0\";\r\n      }\r\n      \r\n      var quotient = this.field.Zero;\r\n      var remainder = this;\r\n      \r\n      var denominatorLeadingTerm = other.getCoefficient(other.Degree);\r\n      var inverseDenominatorLeadingTerm = this.field.inverse(denominatorLeadingTerm);\r\n      \r\n      while (remainder.Degree >= other.Degree && !remainder.Zero)\r\n      {\r\n        var degreeDifference = remainder.Degree - other.Degree;\r\n        var scale = this.field.multiply(remainder.getCoefficient(remainder.Degree), inverseDenominatorLeadingTerm);\r\n        var term = other.multiplyByMonomial(degreeDifference, scale);\r\n        var iterationQuotient = this.field.buildMonomial(degreeDifference, scale);\r\n        quotient = quotient.addOrSubtract(iterationQuotient);\r\n        remainder = remainder.addOrSubtract(term);\r\n      }\r\n      \r\n      return new Array(quotient, remainder);\r\n    }\r\n}\r\n\r\nmodule.exports = GF256Poly;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}