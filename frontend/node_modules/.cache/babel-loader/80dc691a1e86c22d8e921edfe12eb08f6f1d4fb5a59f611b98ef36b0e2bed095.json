{"ast":null,"code":"/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\n\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar ErrorCorrectionLevel = require('./errorlevel');\nvar qrcode = require('./qrcode')();\nvar FORMAT_INFO_MASK_QR = 0x5412;\nvar FORMAT_INFO_DECODE_LOOKUP = new Array(new Array(0x5412, 0x00), new Array(0x5125, 0x01), new Array(0x5E7C, 0x02), new Array(0x5B4B, 0x03), new Array(0x45F9, 0x04), new Array(0x40CE, 0x05), new Array(0x4F97, 0x06), new Array(0x4AA0, 0x07), new Array(0x77C4, 0x08), new Array(0x72F3, 0x09), new Array(0x7DAA, 0x0A), new Array(0x789D, 0x0B), new Array(0x662F, 0x0C), new Array(0x6318, 0x0D), new Array(0x6C41, 0x0E), new Array(0x6976, 0x0F), new Array(0x1689, 0x10), new Array(0x13BE, 0x11), new Array(0x1CE7, 0x12), new Array(0x19D0, 0x13), new Array(0x0762, 0x14), new Array(0x0255, 0x15), new Array(0x0D0C, 0x16), new Array(0x083B, 0x17), new Array(0x355F, 0x18), new Array(0x3068, 0x19), new Array(0x3F31, 0x1A), new Array(0x3A06, 0x1B), new Array(0x24B4, 0x1C), new Array(0x2183, 0x1D), new Array(0x2EDA, 0x1E), new Array(0x2BED, 0x1F));\nvar BITS_SET_IN_HALF_BYTE = new Array(0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4);\nfunction FormatInformation(formatInfo) {\n  this.errorCorrectionLevel = ErrorCorrectionLevel.forBits(formatInfo >> 3 & 0x03);\n  this.dataMask = formatInfo & 0x07;\n  this.__defineGetter__(\"ErrorCorrectionLevel\", function () {\n    return this.errorCorrectionLevel;\n  });\n  this.__defineGetter__(\"DataMask\", function () {\n    return this.dataMask;\n  });\n  this.GetHashCode = function () {\n    return this.errorCorrectionLevel.ordinal() << 3 | dataMask;\n  };\n  this.Equals = function (o) {\n    var other = o;\n    return this.errorCorrectionLevel == other.errorCorrectionLevel && this.dataMask == other.dataMask;\n  };\n}\nFormatInformation.numBitsDiffering = function (a, b) {\n  a ^= b; // a now has a 1 bit exactly where its bit differs with b's\n  // Count bits set quickly with a series of lookups:\n  return BITS_SET_IN_HALF_BYTE[a & 0x0F] + BITS_SET_IN_HALF_BYTE[qrcode.URShift(a, 4) & 0x0F] + BITS_SET_IN_HALF_BYTE[qrcode.URShift(a, 8) & 0x0F] + BITS_SET_IN_HALF_BYTE[qrcode.URShift(a, 12) & 0x0F] + BITS_SET_IN_HALF_BYTE[qrcode.URShift(a, 16) & 0x0F] + BITS_SET_IN_HALF_BYTE[qrcode.URShift(a, 20) & 0x0F] + BITS_SET_IN_HALF_BYTE[qrcode.URShift(a, 24) & 0x0F] + BITS_SET_IN_HALF_BYTE[qrcode.URShift(a, 28) & 0x0F];\n};\nFormatInformation.decodeFormatInformation = function (maskedFormatInfo) {\n  var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo);\n  if (formatInfo != null) {\n    return formatInfo;\n  }\n  // Should return null, but, some QR codes apparently\n  // do not mask this info. Try again by actually masking the pattern\n  // first\n  return FormatInformation.doDecodeFormatInformation(maskedFormatInfo ^ FORMAT_INFO_MASK_QR);\n};\nFormatInformation.doDecodeFormatInformation = function (maskedFormatInfo) {\n  // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n  var bestDifference = 0xffffffff;\n  var bestFormatInfo = 0;\n  for (var i = 0; i < FORMAT_INFO_DECODE_LOOKUP.length; i++) {\n    var decodeInfo = FORMAT_INFO_DECODE_LOOKUP[i];\n    var targetInfo = decodeInfo[0];\n    if (targetInfo == maskedFormatInfo) {\n      // Found an exact match\n      return new FormatInformation(decodeInfo[1]);\n    }\n    var bitsDifference = this.numBitsDiffering(maskedFormatInfo, targetInfo);\n    if (bitsDifference < bestDifference) {\n      bestFormatInfo = decodeInfo[1];\n      bestDifference = bitsDifference;\n    }\n  }\n  // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n  // differing means we found a match\n  if (bestDifference <= 3) {\n    return new FormatInformation(bestFormatInfo);\n  }\n  return null;\n};\nmodule.exports = FormatInformation;","map":{"version":3,"names":["ErrorCorrectionLevel","require","qrcode","FORMAT_INFO_MASK_QR","FORMAT_INFO_DECODE_LOOKUP","Array","BITS_SET_IN_HALF_BYTE","FormatInformation","formatInfo","errorCorrectionLevel","forBits","dataMask","__defineGetter__","GetHashCode","ordinal","Equals","o","other","numBitsDiffering","a","b","URShift","decodeFormatInformation","maskedFormatInfo","doDecodeFormatInformation","bestDifference","bestFormatInfo","i","length","decodeInfo","targetInfo","bitsDifference","module","exports"],"sources":["/Users/alizhetpis/Documents/duken/frontend/node_modules/jsqrcode/src/formatinf.js"],"sourcesContent":["/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\nvar ErrorCorrectionLevel = require('./errorlevel');\r\nvar qrcode = require('./qrcode')();\r\n\r\n\r\nvar FORMAT_INFO_MASK_QR = 0x5412;\r\nvar FORMAT_INFO_DECODE_LOOKUP = new Array(new Array(0x5412, 0x00), new Array(0x5125, 0x01), new Array(0x5E7C, 0x02), new Array(0x5B4B, 0x03), new Array(0x45F9, 0x04), new Array(0x40CE, 0x05), new Array(0x4F97, 0x06), new Array(0x4AA0, 0x07), new Array(0x77C4, 0x08), new Array(0x72F3, 0x09), new Array(0x7DAA, 0x0A), new Array(0x789D, 0x0B), new Array(0x662F, 0x0C), new Array(0x6318, 0x0D), new Array(0x6C41, 0x0E), new Array(0x6976, 0x0F), new Array(0x1689, 0x10), new Array(0x13BE, 0x11), new Array(0x1CE7, 0x12), new Array(0x19D0, 0x13), new Array(0x0762, 0x14), new Array(0x0255, 0x15), new Array(0x0D0C, 0x16), new Array(0x083B, 0x17), new Array(0x355F, 0x18), new Array(0x3068, 0x19), new Array(0x3F31, 0x1A), new Array(0x3A06, 0x1B), new Array(0x24B4, 0x1C), new Array(0x2183, 0x1D), new Array(0x2EDA, 0x1E), new Array(0x2BED, 0x1F));\r\nvar BITS_SET_IN_HALF_BYTE = new Array(0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4);\r\n\r\n\r\nfunction FormatInformation(formatInfo)\r\n{\r\n\tthis.errorCorrectionLevel = ErrorCorrectionLevel.forBits((formatInfo >> 3) & 0x03);\r\n\tthis.dataMask =  (formatInfo & 0x07);\r\n\r\n\tthis.__defineGetter__(\"ErrorCorrectionLevel\", function()\r\n\t{\r\n\t\treturn this.errorCorrectionLevel;\r\n\t});\r\n\tthis.__defineGetter__(\"DataMask\", function()\r\n\t{\r\n\t\treturn this.dataMask;\r\n\t});\r\n\tthis.GetHashCode=function()\r\n\t{\r\n\t\treturn (this.errorCorrectionLevel.ordinal() << 3) |  dataMask;\r\n\t}\r\n\tthis.Equals=function( o)\r\n\t{\r\n\t\tvar other =  o;\r\n\t\treturn this.errorCorrectionLevel == other.errorCorrectionLevel && this.dataMask == other.dataMask;\r\n\t}\r\n}\r\n\r\nFormatInformation.numBitsDiffering=function( a,  b)\r\n{\r\n\ta ^= b; // a now has a 1 bit exactly where its bit differs with b's\r\n\t// Count bits set quickly with a series of lookups:\r\n\treturn BITS_SET_IN_HALF_BYTE[a & 0x0F]\r\n\t  + BITS_SET_IN_HALF_BYTE[(qrcode.URShift(a, 4) & 0x0F)]\r\n\t  + BITS_SET_IN_HALF_BYTE[(qrcode.URShift(a, 8) & 0x0F)]\r\n\t  + BITS_SET_IN_HALF_BYTE[(qrcode.URShift(a, 12) & 0x0F)]\r\n\t  + BITS_SET_IN_HALF_BYTE[(qrcode.URShift(a, 16) & 0x0F)]\r\n\t  + BITS_SET_IN_HALF_BYTE[(qrcode.URShift(a, 20) & 0x0F)]\r\n\t  + BITS_SET_IN_HALF_BYTE[(qrcode.URShift(a, 24) & 0x0F)]\r\n\t  + BITS_SET_IN_HALF_BYTE[(qrcode.URShift(a, 28) & 0x0F)];\r\n}\r\n\r\nFormatInformation.decodeFormatInformation=function( maskedFormatInfo)\r\n{\r\n\tvar formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo);\r\n\tif (formatInfo != null)\r\n\t{\r\n\t\treturn formatInfo;\r\n\t}\r\n\t// Should return null, but, some QR codes apparently\r\n\t// do not mask this info. Try again by actually masking the pattern\r\n\t// first\r\n\treturn FormatInformation.doDecodeFormatInformation(maskedFormatInfo ^ FORMAT_INFO_MASK_QR);\r\n}\r\nFormatInformation.doDecodeFormatInformation=function( maskedFormatInfo)\r\n{\r\n\t// Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\r\n\tvar bestDifference = 0xffffffff;\r\n\tvar bestFormatInfo = 0;\r\n\tfor (var i = 0; i < FORMAT_INFO_DECODE_LOOKUP.length; i++)\r\n\t{\r\n\t\tvar decodeInfo = FORMAT_INFO_DECODE_LOOKUP[i];\r\n\t\tvar targetInfo = decodeInfo[0];\r\n\t\tif (targetInfo == maskedFormatInfo)\r\n\t\t{\r\n\t\t\t// Found an exact match\r\n\t\t\treturn new FormatInformation(decodeInfo[1]);\r\n\t\t}\r\n\t\tvar bitsDifference = this.numBitsDiffering(maskedFormatInfo, targetInfo);\r\n\t\tif (bitsDifference < bestDifference)\r\n\t\t{\r\n\t\t\tbestFormatInfo = decodeInfo[1];\r\n\t\t\tbestDifference = bitsDifference;\r\n\t\t}\r\n\t}\r\n\t// Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\r\n\t// differing means we found a match\r\n\tif (bestDifference <= 3)\r\n\t{\r\n\t\treturn new FormatInformation(bestFormatInfo);\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n\r\nmodule.exports = FormatInformation;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}