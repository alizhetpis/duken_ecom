{"ast":null,"code":"/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\n\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nfunction DataBlock(numDataCodewords, codewords) {\n  this.numDataCodewords = numDataCodewords;\n  this.codewords = codewords;\n  this.__defineGetter__(\"NumDataCodewords\", function () {\n    return this.numDataCodewords;\n  });\n  this.__defineGetter__(\"Codewords\", function () {\n    return this.codewords;\n  });\n}\nDataBlock.getDataBlocks = function (rawCodewords, version, ecLevel) {\n  if (rawCodewords.length != version.TotalCodewords) {\n    throw \"ArgumentException\";\n  }\n\n  // Figure out the number and size of data blocks used by this version and\n  // error correction level\n  var ecBlocks = version.getECBlocksForLevel(ecLevel);\n\n  // First count the total number of data blocks\n  var totalBlocks = 0;\n  var ecBlockArray = ecBlocks.getECBlocks();\n  for (var i = 0; i < ecBlockArray.length; i++) {\n    totalBlocks += ecBlockArray[i].Count;\n  }\n\n  // Now establish DataBlocks of the appropriate size and number of data codewords\n  var result = new Array(totalBlocks);\n  var numResultBlocks = 0;\n  for (var j = 0; j < ecBlockArray.length; j++) {\n    var ecBlock = ecBlockArray[j];\n    for (var i = 0; i < ecBlock.Count; i++) {\n      var numDataCodewords = ecBlock.DataCodewords;\n      var numBlockCodewords = ecBlocks.ECCodewordsPerBlock + numDataCodewords;\n      result[numResultBlocks++] = new DataBlock(numDataCodewords, new Array(numBlockCodewords));\n    }\n  }\n\n  // All blocks have the same amount of data, except that the last n\n  // (where n may be 0) have 1 more byte. Figure out where these start.\n  var shorterBlocksTotalCodewords = result[0].codewords.length;\n  var longerBlocksStartAt = result.length - 1;\n  while (longerBlocksStartAt >= 0) {\n    var numCodewords = result[longerBlocksStartAt].codewords.length;\n    if (numCodewords == shorterBlocksTotalCodewords) {\n      break;\n    }\n    longerBlocksStartAt--;\n  }\n  longerBlocksStartAt++;\n  var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.ECCodewordsPerBlock;\n  // The last elements of result may be 1 element longer;\n  // first fill out as many elements as all of them have\n  var rawCodewordsOffset = 0;\n  for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n    for (var j = 0; j < numResultBlocks; j++) {\n      result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  // Fill out the last data block in the longer ones\n  for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {\n    result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\n  }\n  // Now add in error correction blocks\n  var max = result[0].codewords.length;\n  for (var i = shorterBlocksNumDataCodewords; i < max; i++) {\n    for (var j = 0; j < numResultBlocks; j++) {\n      var iOffset = j < longerBlocksStartAt ? i : i + 1;\n      result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n    }\n  }\n  return result;\n};\nmodule.exports = DataBlock;","map":{"version":3,"names":["DataBlock","numDataCodewords","codewords","__defineGetter__","getDataBlocks","rawCodewords","version","ecLevel","length","TotalCodewords","ecBlocks","getECBlocksForLevel","totalBlocks","ecBlockArray","getECBlocks","i","Count","result","Array","numResultBlocks","j","ecBlock","DataCodewords","numBlockCodewords","ECCodewordsPerBlock","shorterBlocksTotalCodewords","longerBlocksStartAt","numCodewords","shorterBlocksNumDataCodewords","rawCodewordsOffset","max","iOffset","module","exports"],"sources":["/Users/alizhetpis/Documents/duken/frontend/node_modules/jsqrcode/src/datablock.js"],"sourcesContent":["/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction DataBlock(numDataCodewords,  codewords)\r\n{\r\n\tthis.numDataCodewords = numDataCodewords;\r\n\tthis.codewords = codewords;\r\n\t\r\n\tthis.__defineGetter__(\"NumDataCodewords\", function()\r\n\t{\r\n\t\treturn this.numDataCodewords;\r\n\t});\r\n\tthis.__defineGetter__(\"Codewords\", function()\r\n\t{\r\n\t\treturn this.codewords;\r\n\t});\r\n}\t\r\n\t\r\nDataBlock.getDataBlocks=function(rawCodewords,  version,  ecLevel)\r\n{\r\n\t\r\n\tif (rawCodewords.length != version.TotalCodewords)\r\n\t{\r\n\t\tthrow \"ArgumentException\";\r\n\t}\r\n\t\r\n\t// Figure out the number and size of data blocks used by this version and\r\n\t// error correction level\r\n\tvar ecBlocks = version.getECBlocksForLevel(ecLevel);\r\n\t\r\n\t// First count the total number of data blocks\r\n\tvar totalBlocks = 0;\r\n\tvar ecBlockArray = ecBlocks.getECBlocks();\r\n\tfor (var i = 0; i < ecBlockArray.length; i++)\r\n\t{\r\n\t\ttotalBlocks += ecBlockArray[i].Count;\r\n\t}\r\n\t\r\n\t// Now establish DataBlocks of the appropriate size and number of data codewords\r\n\tvar result = new Array(totalBlocks);\r\n\tvar numResultBlocks = 0;\r\n\tfor (var j = 0; j < ecBlockArray.length; j++)\r\n\t{\r\n\t\tvar ecBlock = ecBlockArray[j];\r\n\t\tfor (var i = 0; i < ecBlock.Count; i++)\r\n\t\t{\r\n\t\t\tvar numDataCodewords = ecBlock.DataCodewords;\r\n\t\t\tvar numBlockCodewords = ecBlocks.ECCodewordsPerBlock + numDataCodewords;\r\n\t\t\tresult[numResultBlocks++] = new DataBlock(numDataCodewords, new Array(numBlockCodewords));\r\n\t\t}\r\n\t}\r\n\t\r\n\t// All blocks have the same amount of data, except that the last n\r\n\t// (where n may be 0) have 1 more byte. Figure out where these start.\r\n\tvar shorterBlocksTotalCodewords = result[0].codewords.length;\r\n\tvar longerBlocksStartAt = result.length - 1;\r\n\twhile (longerBlocksStartAt >= 0)\r\n\t{\r\n\t\tvar numCodewords = result[longerBlocksStartAt].codewords.length;\r\n\t\tif (numCodewords == shorterBlocksTotalCodewords)\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tlongerBlocksStartAt--;\r\n\t}\r\n\tlongerBlocksStartAt++;\r\n\t\r\n\tvar shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.ECCodewordsPerBlock;\r\n\t// The last elements of result may be 1 element longer;\r\n\t// first fill out as many elements as all of them have\r\n\tvar rawCodewordsOffset = 0;\r\n\tfor (var i = 0; i < shorterBlocksNumDataCodewords; i++)\r\n\t{\r\n\t\tfor (var j = 0; j < numResultBlocks; j++)\r\n\t\t{\r\n\t\t\tresult[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\r\n\t\t}\r\n\t}\r\n\t// Fill out the last data block in the longer ones\r\n\tfor (var j = longerBlocksStartAt; j < numResultBlocks; j++)\r\n\t{\r\n\t\tresult[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\r\n\t}\r\n\t// Now add in error correction blocks\r\n\tvar max = result[0].codewords.length;\r\n\tfor (var i = shorterBlocksNumDataCodewords; i < max; i++)\r\n\t{\r\n\t\tfor (var j = 0; j < numResultBlocks; j++)\r\n\t\t{\r\n\t\t\tvar iOffset = j < longerBlocksStartAt?i:i + 1;\r\n\t\t\tresult[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nmodule.exports = DataBlock;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}